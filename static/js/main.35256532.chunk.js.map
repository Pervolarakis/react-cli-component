{"version":3,"sources":["Commands/directories.js","Commands/commands.js","Components/Cli.js","App.js","serviceWorker.js","index.js"],"names":["directories","currentDirectory","currentDirectoryName","commands","message","route","Object","keys","toString","split","join","getSubDirectory","startsWith","jumpCnt","length","i","newRoute","pop","shift","forEach","value","key","undefined","file","Cli","props","useState","setValue","newLineValue","setNewLineValue","pastCommands","setPastCommands","oldValueLength","setOldValueLength","backIndex","setBackIndex","textLog","React","createRef","useEffect","current","scrollTop","scrollHeight","slice","onSumbit","input","msg","previeousLength","previousMessages","onButtonPress","e","a","target","selectionStart","keyCode","preventDefault","shiftKey","style","width","height","marginTop","backgroundColor","borderTopLeftRadius","borderTopRightRadius","display","flexDirection","borderRadius","margin","ref","spellCheck","fontSize","border","resize","padding","color","outline","onChange","onKeyDown","App","className","fontFamily","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.35256532.chunk.js","sourcesContent":["export const directories = {\r\n\r\n    'boot': {\r\n        'doc.txt': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam a venenatis ex. Proin placerat risus nisl, sit amet cursus massa tincidunt id. Phasellus facilisis ullamcorper consectetur. Aliquam pharetra sapien quis nunc volutpat, nec egestas purus fringilla'\r\n    },\r\n    'usr': {\r\n        'bin': null,\r\n        'lib': null,\r\n        'share': null,\r\n        'include': null\r\n    },\r\n    'etc': null,\r\n    'home': {\r\n        'user': {\r\n            'desktop': {\r\n                'myfolder': {\r\n                    'myfile.txt': 'Nunc vitae tincidunt risus. Praesent quis lorem eu nunc sollicitudin pellentesque. Integer sollicitudin leo consequat, pulvinar purus et, tincidunt sapien. Curabitur sodales suscipit metus eu ullamcorper. '\r\n                }\r\n            },\r\n            'picrures': null,\r\n            'music': null\r\n        },\r\n        'root': {\r\n            'desktop': null,\r\n            'picrures': null,\r\n            'music': null\r\n        }\r\n    },\r\n    'dev': null,\r\n    'proc': null\r\n\r\n}","import { directories } from './directories';\r\n\r\n\r\nlet currentDirectory = directories;\r\nlet currentDirectoryName = '/';\r\n\r\nconst getSubDirectory = (route) => {\r\n    if (route) {\r\n        return Object.keys(route).toString().split(',').join(\"\\t\")\r\n    }\r\n    return ' '\r\n}\r\n\r\nexport const commands = message => {\r\n\r\n    switch (message) {\r\n        case 'help':\r\n            return ('\\tls: list all files for current directory\\n\\tcd: change directory\\n\\tpwd: get current directory\\n\\tclear: clean the cli\\n\\tcat: open a file')\r\n\r\n        case 'ls':\r\n            return (`\\t${getSubDirectory(currentDirectory)}`)\r\n\r\n        case 'pwd':\r\n            return (`\\t${currentDirectoryName}`)\r\n\r\n        default:\r\n            if (message.startsWith('cd')) {\r\n                let route = message.split(\" \")[1];\r\n                if (route) {\r\n                    if (route.startsWith('..')) {\r\n                        let jumpCnt = route.split('/').length;\r\n                        for (let i = 0; i < jumpCnt; i++) {\r\n                            let newRoute = currentDirectoryName.split('/');\r\n                            newRoute.pop()\r\n                            newRoute.pop()\r\n                            newRoute.shift();\r\n                            currentDirectory = directories\r\n                            currentDirectoryName = '/'\r\n                            newRoute.forEach((value, key) => {\r\n                                currentDirectory = currentDirectory[value]\r\n                                currentDirectoryName += (value + '/')\r\n                            })\r\n                        }\r\n                        return (`\\tswitched to ${currentDirectoryName}`)\r\n\r\n                    } else {\r\n                        if (currentDirectory[route] !== undefined) {\r\n                            currentDirectory = currentDirectory[route];\r\n                            currentDirectoryName = currentDirectoryName + route + '/';\r\n                            return (`\\tswitched to ${route}`)\r\n                        }\r\n                        return (`\\tunkown path ${route}`)\r\n                    }\r\n\r\n                }\r\n            }\r\n            if (message.startsWith('cat')) {\r\n                let file = message.split(\" \")[1];\r\n                if (file) {\r\n                    if (currentDirectory[file] !== undefined) {\r\n                        return (`\\t${currentDirectory[file]}`)\r\n                    }\r\n                    else {\r\n                        return (`\\tunknown file ${file}`)\r\n                    }\r\n                }\r\n            }\r\n            return (`\\tunknown command ${message}`)\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { commands } from '../Commands/commands'\r\n\r\n\r\nconst Cli = props => {\r\n\r\n    //setting all the state\r\n    const [value, setValue] = useState(' Root > ');\r\n    const [newLineValue, setNewLineValue] = useState('');\r\n    const [pastCommands, setPastCommands] = useState([]);\r\n    const [oldValueLength, setOldValueLength] = useState(8);\r\n    const [backIndex, setBackIndex] = useState(0);\r\n    const textLog = React.createRef();\r\n\r\n\r\n\r\n\r\n    //componentDidUpdate for text area autoscroll\r\n    useEffect(() => {\r\n        textLog.current.scrollTop = textLog.current.scrollHeight;\r\n    })\r\n\r\n    //every time backIndex is changed (on up or down arrow key press) change the text\r\n    useEffect(() => {\r\n        if (backIndex !== 0) {\r\n            //set current value to an older command\r\n            setNewLineValue(pastCommands[pastCommands.length - backIndex])\r\n            //change the text to match new text\r\n            setValue(`${value.slice(0, oldValueLength)}${pastCommands[pastCommands.length - backIndex]}`)\r\n        }\r\n\r\n    }, [backIndex])\r\n\r\n    //when a message is received append it to the console\r\n    const sendMessage = (msg) => {\r\n        setValue(previousMessages => `${previousMessages} \\n${msg}\\n Root > `)\r\n        setOldValueLength(previeousLength => previeousLength + (` \\n${msg}\\n Root > `).length)\r\n    }\r\n\r\n    //on submit\r\n    const onSumbit = (input) => {\r\n        if (input === 'clear') {\r\n            setValue(' Root > ');\r\n            setOldValueLength(8);\r\n\r\n        } else {\r\n            setOldValueLength(previeousLength => previeousLength + input.length)\r\n            sendMessage(commands(input));\r\n        }\r\n    }\r\n\r\n    //when a button is pressed\r\n    const onButtonPress = async (e) => {\r\n\r\n        //if the cursor is not at the end of the text area then do nothing\r\n        if (e.target.selectionStart < oldValueLength) {\r\n            if (e.keyCode !== 39 && e.keyCode !== 37) {\r\n                e.preventDefault()\r\n            }\r\n\r\n        }\r\n\r\n        //when backspace is being pressed\r\n        if (e.keyCode === 8) {\r\n            if (e.target.selectionStart === oldValueLength) {\r\n                e.preventDefault()\r\n            }\r\n        }\r\n\r\n        //when up or down is pressed\r\n        if (e.keyCode === 38 || e.keyCode === 40) {\r\n            e.preventDefault()\r\n            //if the button i equal to up we increase the back index by 1\r\n            if (e.keyCode === 38) {\r\n                if (backIndex < pastCommands.length) {\r\n                    setBackIndex(backIndex + 1);\r\n                } else {\r\n                    return;\r\n                }\r\n\r\n            }\r\n            //else we decrease it by one\r\n            else {\r\n                if (backIndex > 1) {\r\n                    setBackIndex(backIndex - 1);\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        //when enter is pressed\r\n        if (e.keyCode === 13 && e.shiftKey === false) {\r\n            e.preventDefault();\r\n            if (newLineValue !== '' && newLineValue !== undefined) {\r\n                onSumbit(newLineValue)\r\n                setPastCommands([...pastCommands, newLineValue]);\r\n                setNewLineValue('');\r\n                setBackIndex(0);\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ width: 600, height: 400, marginTop: 150 }}>\r\n            <div style={{ height: 30, width: 620, backgroundColor: \"white\", borderTopLeftRadius: 5, borderTopRightRadius: 5, display: \"flex\", flexDirection: \"row\" }}>\r\n                <div style={{ width: 12, height: 12, backgroundColor: \"#e75448\", borderRadius: 60, margin: \"8px\" }}></div>\r\n                <div style={{ width: 12, height: 12, backgroundColor: \"#e5c30f\", borderRadius: 60, margin: \"8px\" }}></div>\r\n                <div style={{ width: 12, height: 12, backgroundColor: \"#3bb662\", borderRadius: 60, margin: \"8px\" }}></div>\r\n            </div>\r\n            <textarea ref={textLog} spellCheck=\"false\" style={{ fontSize: 15, border: \"none\", resize: \"none\", width: 600, height: 330, backgroundColor: \"#30353a\", padding: 10, color: \"white\", outline: \"none\" }} value={value} onChange={(e) => { setValue(e.target.value); setNewLineValue(e.target.value.slice(oldValueLength)) }} onKeyDown={onButtonPress} >\r\n\r\n            </textarea>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Cli;","import React from 'react';\r\nimport './App.css';\r\nimport Cli from './Components/Cli'\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Cli />\r\n      </header>\r\n      <p style={{ color: \"white\", fontFamily: 'consolas' }}>\r\n        Created by Pervolarakis\r\n        <br />\r\n        @twentytwenty\r\n      </p>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}